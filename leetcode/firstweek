// int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
//     int *returnarray=malloc(sizeof(int)*2);
//      for(int i=0;i<numsSize;i++)
//                for(int j=0;j<numsSize;j++)
//                    if(nums[j]+nums[i]==target)
//                       if(i!=j)
//                          {
//                              returnarray[0]=i;
//                              returnarray[1]=j;
//                              *returnSize=2;
//                              return returnarray;
//                          }
// *returnSize=0;
// return NULL;
// }
// bool isPalindrome(int x){
//     if (x < 0) return false;
//     long x1 = x, y = 0;
//     while (x1){
//         y = y * 10 + x1 % 10;
//         x1 /= 10;
//     }
//     return x == y;
// }
// char* longestCommonPrefix(char** strs, int strsSize) {
//  if (strsSize == 0) {
//     return "";
// }
// char * prefix = strs[0];
// for (int i = 1; i < strsSize; i++) {
//     int j = 0;
//     while (prefix[j] != '\0' && strs[i][j] != '\0' && prefix[j] == strs[i][j]) {
//         j++;
//     }
// prefix[j] = '\0';
// }
// return prefix;
// }
